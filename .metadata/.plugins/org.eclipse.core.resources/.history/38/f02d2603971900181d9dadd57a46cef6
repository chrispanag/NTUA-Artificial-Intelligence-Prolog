package arti;

import java.util.ArrayList;
import java.util.Iterator;

import com.ugos.jiprolog.engine.JIPEngine;
import com.ugos.jiprolog.engine.JIPQuery;
import com.ugos.jiprolog.engine.JIPTerm;
import com.ugos.jiprolog.engine.JIPTermParser;

public class Node {
	public Coordinate coord;
	public String line_id;
	public String id;
	
	// Constructor
	public Node(ArrayList<String> n) {
		//  Set Coordinates
		if (n.get(0).length() > 0 && n.get(1).length() > 0) {
			this.coord = new Coordinate(n.get(0), n.get(1));
		}
		
		// Line ID
		if (n.get(2).length() > 0) {
			line_id = n.get(2);
		}
		
		// Node ID 
		if (n.get(3).length() > 0) {
			id = n.get(3);
		}
	}
	
	// Returns the IDs of the Nodes you can move from this node.
	public ArrayList<String> canMoveTo(JIPEngine jip) {
		ArrayList<String> children_ids = new ArrayList<String>();
		JIPQuery query = queryProlog(jip, "canMove", new String[] {"id" + this.id, "X"});
		JIPTerm term = query.nextSolution();
		while (term != null) {
			children_ids.add(term.getVariablesTable().get("X").toString().substring(2));
			term = query.nextSolution();
		}
		return children_ids;
	}
	
	
	
	@Override
	public String toString() {
		return "Node [coord=" + coord + ", line_id=" + line_id + ", id=" + id + "]";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((coord == null) ? 0 : coord.hashCode());
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result + ((line_id == null) ? 0 : line_id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Node other = (Node) obj;
		if (coord == null) {
			if (other.coord != null)
				return false;
		} else if (!coord.equals(other.coord))
			return false;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		if (line_id == null) {
			if (other.line_id != null)
				return false;
		} else if (!line_id.equals(other.line_id))
			return false;
		return true;
	}

	private static JIPQuery queryProlog (JIPEngine jip, String name, String[] parameters) {
		JIPTermParser parser = jip.getTermParser();
		Predicate k = new Predicate(name, parameters);
		return jip.openSynchronousQuery(parser.parseTerm(k.toString()));
	}

	public static Node getNearestNodeRoad(JIPEngine jip, Coordinate coordinate, ArrayList<Node> nodes) {
		Node nearest = null;
		Iterator<Node> it = nodes.iterator();
		double min = Double.MAX_VALUE;
		while (it.hasNext()) {
			Node n = it.next();
			JIPQuery queryProlog(jip, "isRoad", new String[] {n.line_id});
			double distance = n.coord.distanceFrom(coordinate);
			if (distance < min) {
				min = distance;
				nearest = n;
			}
		}
		return nearest;
	}
}
