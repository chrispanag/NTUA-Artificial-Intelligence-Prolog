package arti;

import java.util.ArrayList;

import com.ugos.jiprolog.engine.JIPEngine;
import com.ugos.jiprolog.engine.JIPQuery;
import com.ugos.jiprolog.engine.JIPTerm;
import com.ugos.jiprolog.engine.JIPTermParser;

public class Line {
	public String id = null;
	public String type = null;
	public boolean oneway = false;
	public boolean lit = false;
	public int maxspeed = -1;
	public boolean reverse = false;
	
	public Line(ArrayList<String> properties) {
		if (properties.get(0).length() > 0) {
			id = properties.get(0);
		}
		if (properties.get(1).length() > 0) {
			type = properties.get(1);
		}
		// Oneway property
		if (properties.get(3).equals("yes")) {
			oneway = true;
		} else if (properties.get(3).equals("-1")) {
			oneway = true;
			reverse = true;
		}
		
		if (properties.get(4).equals("yes")) {
			lit = true;
		}
		
		if (properties.get(6).length() > 0) {
			maxspeed = Integer.parseInt(properties.get(6));
		}
	}
	
	public boolean isRoad() {
		if (type != null) {
			return (!type.equals("steps") 
					&& !type.equals("pedestrian") 
					&& !type.equals("footway") 
					&& !type.equals("unclassified") 
					&& !type.equals("track")
					&& !type.equals("construction")
					&& !type.equals("path")
					&& !type.equals("proposed")
					&& !type.equals("cycleway")
					&& !type.equals("bridleway")
					&& !type.equals("services")
					&& !type.equals("elevator"));
		} else {
			return false;
		}
	}
	
	public static int maxSpeed(String line_id, JIPEngine jip) {
		int maxSpeed = 40;
		JIPQuery query = queryProlog (jip, "maxSpeed", new String[] {"id" + line_id, "X"});
		JIPTerm term = query.nextSolution();
		if (term != null) {
			maxSpeed = Integer.parseInt(term.getVariablesTable().get("X").toString());
		}
		return maxSpeed;
	}
	
	private static JIPQuery queryProlog (JIPEngine jip, String name, String[] parameters) {
		JIPTermParser parser = jip.getTermParser();
		Predicate k = new Predicate(name, parameters);
		return jip.openSynchronousQuery(parser.parseTerm(k.toString()));
	}
}
